[{"C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\functions\\src\\index.ts":"1","C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\functions\\src\\indexTest.ts":"2","C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\src\\react-app-env.d.ts":"3","C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\src\\reportWebVitals.ts":"4","C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\src\\setupTests.ts":"5","C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\test.ts":"6"},{"size":318,"mtime":1645554638370,"results":"7","hashOfConfig":"8"},{"size":1785,"mtime":1645554747881,"results":"9","hashOfConfig":"8"},{"size":41,"mtime":1644914284617,"results":"10","hashOfConfig":"11"},{"size":440,"mtime":1645555103359,"results":"12","hashOfConfig":"11"},{"size":246,"mtime":1645555109596,"results":"13","hashOfConfig":"11"},{"size":169,"mtime":1645555137174,"results":"14","hashOfConfig":"11"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"16eqmd2",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19e0858",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\functions\\src\\index.ts",["35"],[],"import express, { Request, Response } from \"express\";\r\n\r\nconst app = express();\r\nconst port = 3000;\r\nconst str = \"string\";\r\n\r\napp.get(\"/\", (_req: Request, res: Response) => {\r\n  res.send(\"Hello World!\");\r\n});\r\n\r\napp.listen(port, () => {\r\n  return console.log(`Express is listening at http://localhost:${port}`);\r\n});\r\n","C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\functions\\src\\indexTest.ts",["36","37"],[],"// The Cloud Functions for Firebase SDK to create Cloud Functions and set up triggers.\r\nimport functions, { Request, Response } from \"firebase-functions\";\r\n\r\n// The Firebase Admin SDK to access Firestore.\r\nimport admin from \"firebase-admin\";\r\n\r\nadmin.initializeApp();\r\n\r\n// Take the text parameter passed to this HTTP endpoint and insert it into\r\n// Firestore under the path /messages/:documentId/original\r\nexports.addMessage = functions.https.onRequest(\r\n  async (req: Request, res: Response) => {\r\n    // Grab the text parameter.\r\n    const original = req.query.text;\r\n    // Push the new message into Firestore using the Firebase Admin SDK.\r\n    const writeResult = await admin\r\n      .firestore()\r\n      .collection(\"messages\")\r\n      .add({ original: original });\r\n    // Send back a message that we've successfully written the message\r\n    res.json({ result: `Message with ID: ${writeResult.id} added.` });\r\n  }\r\n);\r\n\r\n// Listens for new messages added to /messages/:documentId/original and creates an\r\n// uppercase version of the message to /messages/:documentId/uppercase\r\nexports.makeUppercase = functions.firestore\r\n  .document(\"/messages/{documentId}\")\r\n  .onCreate((snap: any, context: any) => {\r\n    // Grab the current value of what was written to Firestore.\r\n    const original = snap.data().original;\r\n\r\n    // Access the parameter `{documentId}` with `context.params`\r\n    functions.logger.log(\"Uppercasing\", context.params.documentId, original);\r\n\r\n    const uppercase = original.toUpperCase();\r\n\r\n    // You must return a Promise when performing asynchronous tasks inside a Functions such as\r\n    // writing to Firestore.\r\n    // Setting an 'uppercase' field in Firestore document returns a Promise.\r\n    return snap.ref.set({ uppercase }, { merge: true });\r\n  });\r\n","C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\src\\react-app-env.d.ts",[],[],"C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\src\\reportWebVitals.ts",[],[],"C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\src\\setupTests.ts",[],[],"C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\test.ts",[],[],{"ruleId":"38","severity":1,"message":"39","line":5,"column":7,"nodeType":"40","messageId":"41","endLine":5,"endColumn":10},{"ruleId":"42","severity":1,"message":"43","line":29,"column":20,"nodeType":"44","messageId":"45","endLine":29,"endColumn":23,"suggestions":"46"},{"ruleId":"42","severity":1,"message":"43","line":29,"column":34,"nodeType":"44","messageId":"45","endLine":29,"endColumn":37,"suggestions":"47"},"@typescript-eslint/no-unused-vars","'str' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["48","49"],["50","51"],{"messageId":"52","fix":"53","desc":"54"},{"messageId":"55","fix":"56","desc":"57"},{"messageId":"52","fix":"58","desc":"54"},{"messageId":"55","fix":"59","desc":"57"},"suggestUnknown",{"range":"60","text":"61"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"60","text":"62"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"63","text":"61"},{"range":"63","text":"62"},[1184,1187],"unknown","never",[1198,1201]]