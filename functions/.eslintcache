[{"C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\functions\\src\\index.ts":"1","C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\functions\\src\\indexTest.ts":"2"},{"size":318,"mtime":1645554638370,"results":"3","hashOfConfig":"4"},{"size":1785,"mtime":1645554747881,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"p26x68",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\functions\\src\\index.ts",["11"],"import express, { Request, Response } from \"express\";\r\n\r\nconst app = express();\r\nconst port = 3000;\r\nconst str = \"string\";\r\n\r\napp.get(\"/\", (_req: Request, res: Response) => {\r\n  res.send(\"Hello World!\");\r\n});\r\n\r\napp.listen(port, () => {\r\n  return console.log(`Express is listening at http://localhost:${port}`);\r\n});\r\n","C:\\Users\\joasb\\Documents\\Repositories\\Babble2\\functions\\src\\indexTest.ts",["12","13"],{"ruleId":"14","severity":1,"message":"15","line":5,"column":7,"nodeType":"16","messageId":"17","endLine":5,"endColumn":10},{"ruleId":"18","severity":1,"message":"19","line":29,"column":20,"nodeType":"20","messageId":"21","endLine":29,"endColumn":23,"suggestions":"22"},{"ruleId":"18","severity":1,"message":"19","line":29,"column":34,"nodeType":"20","messageId":"21","endLine":29,"endColumn":37,"suggestions":"23"},"@typescript-eslint/no-unused-vars","'str' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["24","25"],["26","27"],{"messageId":"28","fix":"29","desc":"30"},{"messageId":"31","fix":"32","desc":"33"},{"messageId":"28","fix":"34","desc":"30"},{"messageId":"31","fix":"35","desc":"33"},"suggestUnknown",{"range":"36","text":"37"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"36","text":"38"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"39","text":"37"},{"range":"39","text":"38"},[1184,1187],"unknown","never",[1198,1201]]